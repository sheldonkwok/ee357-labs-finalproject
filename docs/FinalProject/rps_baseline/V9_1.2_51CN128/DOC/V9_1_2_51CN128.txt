=============================================================================
List of generated methods in project: V9_1_2_51CN128

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "TimerDelay" (bean TimerInt)
   - TimerDelay_Enable -This method enables the component - it starts the timer. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - TimerDelay_Disable -This method disables the component - it stops the timer. No events will be generated.
   - TimerDelay_EnableEvent -This method enables the events.
   - TimerDelay_DisableEvent -This method disables the events.

Module "RxTx_spi"  (bean SynchroMaster)
   - RxTx_spi_Enable -Enable the component - it starts send and receive functions. Events may be generated 
                ("DisableEvent"/"EnableEvent"). This method cannot be disabled if the Fault mode is enabled. It's intended for 
                re-enabling the module if fault occurred. For more information please see the <"Fault mode" >property .
   - RxTx_spi_Disable -Disable the component - it stops the send and receive functions. No events will be generated. Note: When 
                this method is called while a transmission is in progress, the data being transmitted/received may be lost.
   - RxTx_spi_EnableEvent -Enable the events. This method is available only if the "Interrupt service/event" property is 
                enabled and at least the one of events is set to generate code.
   - RxTx_spi_DisableEvent -Disable the events. This method is available only if the "Interrupt service/event" property is 
                enabled and at least the one of events is set to generate code.
   - RxTx_spi_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does 
                not wait for data).   For information about SW overrun behavior please see <General info page>. [ Version 
                specific information for Freescale 56800 derivatives ]   DMA mode:  If DMA controller is available on selected 
                CPU and receiver is configured to use DMA controller then this method only sets the selected DMA channel. 
                Status of the DMA transfer can then be checked using method GetCharsInRxBuf. See typical usage for details 
                about communication using DMA.
   - RxTx_spi_SendChar -Sends one character to the channel. [ Version specific information for Freescale 56800 derivatives ]   
                DMA mode:  If DMA controller is available on the selected CPU and the transmitter is configured to use DMA 
                controller then this method only sets the selected DMA channel. The status of the DMA transfer can then be 
                checked using GetCharsInTxBuf method. See the typical usage for details about communication using DMA.
   - RxTx_spi_SetShiftClockPolarity -Sets the shift clock polarity at runtime. Output data will be shifted on the selected edge 
                polarity. The method will disable communication (if enabled), change the shift clock polarity end re-enable the 
                communication (if it was enabled before).
   - RxTx_spi_SetIdleClockPolarity -Sets the idle clock polarity at runtime. If the communication does not run, the clock 
                signal will have required level. The method will disable communication (if enabled), change the idle clock 
                polarity end re-enable the communication (if it was enabled before).
   - RxTx_spi_GetError -Returns a set of errors on the channel (errors that cannot be returned in given methods). The component 
                accumulates errors in a set; after calling [GetError] this set is returned and cleared. This method is 
                available only if the "Interrupt service/event" property is enabled.

Module "sdCS"      (bean BitIO)
   - sdCS_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - sdCS_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "ledGreen"  (bean BitIO)
   - ledGreen_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - ledGreen_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - ledGreen_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.
   - ledGreen_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "ledRed"    (bean BitIO)
   - ledRed_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - ledRed_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - ledRed_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.
   - ledRed_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "lcdBKLITE" (bean BitIO)
   - lcdBKLITE_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - lcdBKLITE_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - lcdBKLITE_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - lcdBKLITE_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "sdDETECT"  (bean BitIO)
   - sdDETECT_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "grphRESET" (bean BitIO)
   - grphRESET_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - grphRESET_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - grphRESET_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - grphRESET_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "grphSCL"   (bean BitIO)
   - grphSCL_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - grphSCL_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "grphRS"    (bean BitIO)
   - grphRS_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - grphRS_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "grphSI"    (bean BitIO)
   - grphSI_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - grphSI_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "ModulusTimer" (bean TimerInt)
   - ModulusTimer_Enable -This method enables the component - it starts the timer. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - ModulusTimer_Disable -This method disables the component - it stops the timer. No events will be generated.
   - ModulusTimer_EnableEvent -This method enables the events.
   - ModulusTimer_DisableEvent -This method disables the events.
   - ModulusTimer_SetFreqHz -This method sets the new frequency of the generated events. The frequency is expressed in [Hz] as 
                a 16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> in the Runtime setting area.

Module "flashCS"   (bean BitIO)
   - flashCS_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - flashCS_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - flashCS_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - flashCS_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "swDebounceTimer" (bean TimerInt)
   - swDebounceTimer_Enable -This method enables the component - it starts the timer. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - swDebounceTimer_Disable -This method disables the component - it stops the timer. No events will be generated.
   - swDebounceTimer_EnableEvent -This method enables the events.
   - swDebounceTimer_DisableEvent -This method disables the events.

Module "audEnable" (bean BitIO)
   - audEnable_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - audEnable_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - audEnable_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - audEnable_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - audEnable_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "i2c"       (bean InternalI2C)
   - i2c_Enable -Enables I2C component. Events may be generated ("DisableEvent"/"EnableEvent").
   - i2c_Disable -Disables I2C component. No events will be generated.
   - i2c_EnableEvent -Enables the events.  This method is enabled only if any event is generated.
   - i2c_DisableEvent -Disables the events.  This method is enabled only if any event is generated.
   - i2c_SendChar -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave address 
                bytes inclusive of R/W bit = 0 to the I2C bus and then writes one character (byte) to the bus. The slave 
                address must be specified before, by the "SelectSlave" or "SelectSlave10" method or in the component 
                initialization section, "Target slave address init" property. If interrupt service is enabled and the method 
                returns ERR_OK, it doesn't mean that transmission was successful. The state of transmission is obtainable from 
                (OnTransmitData, OnError or OnArbitLost) events.   When working as a SLAVE, this method writes a character to 
                the internal output slave buffer and, after the master starts the communication, to the I2C bus. If no 
                character is ready for a transmission (internal output slave buffer is empty), the Empty character will be sent 
                (see "Empty character" property).
   - i2c_RecvChar -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave address 
                bytes inclusive of R/W bit = 1 to the I2C bus, then reads one character (byte) from the bus and then sends the 
                stop condition. The slave address must be specified before, by the "SelectSlave" or "SelectSlave10" method or 
                in component initialization section, property "Target slave address init". If interrupt service is enabled and 
                the method returns ERR_OK, it doesn't mean that transmission was finished successfully. The state of 
                transmission must be tested by means of events (OnReceiveData, OnError or OnArbitLost). In case of successful 
                transmission, received data is ready after OnReceiveData event is called.   When working as a SLAVE, this 
                method reads a character from the input slave buffer.
   - i2c_SendBlock -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The 
                slave address must be specified before, by the "SelectSlave" or "SlaveSelect10" method or in component 
                initialization section, "Target slave address init" property. If interrupt service is enabled and the method 
                returns ERR_OK, it doesn't mean that transmission was successful. The state of transmission is detectable by 
                means of events (OnTransmitData, OnError or OnArbitLost). Data to be send is not copied to an internal buffer 
                and remains in the original location. Therefore the content of the buffer should not be changed until the 
                transmission is complete. Event OnTransmitData can be used to detect the end of the transmission.  When working 
                as a SLAVE, this method writes a block of characters to the internal output slave buffer and then, after the 
                master starts the communication, to the I2C bus. If no character is ready for a transmission (internal output 
                slave buffer is empty), the "Empty character" will be sent (see "Empty character" property). In SLAVE mode the 
                data are copied to an internal buffer, if specified by "Output buffer size" property.
   - i2c_RecvBlock -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 1 to the I2C bus, then reads the block of characters from the bus and then 
                sends the stop condition. The slave address must be specified before, by the "SelectSlave" or "SelectSlave10" 
                method or in component initialization section, "Target slave address init" property. If interrupt service is 
                enabled and the method returns ERR_OK, it doesn't mean that transmission was finished successfully. The state 
                of transmission must be tested by means of events (OnReceiveData, OnError or OnArbitLost). In case of 
                successful transmission, received data is ready after OnReceiveData event is called.   When working as a SLAVE, 
                this method reads a block of characters from the input slave buffer.
   - i2c_GetCharsInTxBuf -Returns number of characters in the output buffer. In SLAVE mode returns the number of characters in 
                the internal slave output buffer. In MASTER mode returns number of characters to be sent from the user buffer 
                (passed by SendBlock method).  This method is not supported in polling mode.
   - i2c_GetCharsInRxBuf -Returns number of characters in the input buffer. In SLAVE mode returns the number of characters in 
                the internal slave input buffer. In MASTER mode returns number of characters to be received into a user buffer 
                (passed by RecvChar or RecvBlock method).  This method is not supported in polling mode.
   - i2c_SelectSlave -This method selects a new slave for communication by its 7-bit slave address value. Any send or receive 
                method directs to or from selected device, until a new slave device is selected by this method. This method is 
                not available for the SLAVE mode.

Module "peTimer"   (bean TimerInt)
   - peTimer_Enable -This method enables the component - it starts the timer. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - peTimer_Disable -This method disables the component - it stops the timer. No events will be generated.
   - peTimer_EnableEvent -This method enables the events.
   - peTimer_DisableEvent -This method disables the events.

Module "swPort"    (bean BitsIO)
   - swPort_GetDir -Return selected direction.
   - swPort_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input value of 
                the pins and returns it. If the direction is [output] then returns the last written value (see <Safe mode> 
                property for limitations).
   - swPort_GetBit -Returns the value of the specified bit/pin of the Input/Output component. If the direction is [input] then 
                it reads the input value of the pin and returns it. If the direction is [output] then it returns the last 
                written value (see <Safe mode> property for limitations).

Module "rtcINT"    (bean ExtInt)
   - rtcINT_Enable -Enable the component - the external events are accepted. This method is available only if HW module allows 
                enable/disable of the interrupt.
   - rtcINT_Disable -Disable the component - the external events are not accepted. This method is available only if HW module 
                allows enable/disable of the interrupt.
   - rtcINT_GetVal -Returns the actual value of the input pin of the component.

Module "sndPWM"    (bean PWM)
   - sndPWM_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - sndPWM_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - sndPWM_EnableEvent -This method enables the events. The method is available only if any event is selected.
   - sndPWM_DisableEvent -This method disables the events. The method is available only if any event is selected.
   - sndPWM_SetRatio8 -This method sets a new duty-cycle ratio. Ratio is expressed as an 8-bit unsigned integer number. 0 - FF 
                value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.   Note: Calculated duty depends on the timer capabilities and on the 
                selected period.
   - sndPWM_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - 
                FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - sndPWM_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - sndPWM_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "Cpu"       (bean MCF51CN128_80)
   - Cpu_EnableInt -Enables maskable interrupts
   - Cpu_DisableInt -Disables maskable interrupts

===================================================================================
