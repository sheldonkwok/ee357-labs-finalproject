/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : RxTx_spi.h
**     Project   : timeLib
**     Processor : MCF51CN128CLK
**     Component : SynchroMaster
**     Version   : Component 02.335, Driver 01.29, CPU db: 3.00.030
**     Compiler  : CodeWarrior ColdFireV1 C Compiler
**     Date/Time : 9/1/2010, 7:04 PM
**     Abstract  :
**         This component "SynchroMaster" implements MASTER part of synchronous
**         serial master-slave communication.
**     Settings  :
**         Synchro type                : MASTER
**
**         Serial channel              : SPI2
**
**         Protocol
**             Init baud rate          : 2_097MHz
**             Clock edge              : falling
**             Width                   : 8 bits (always)
**             Empty character         : 0
**             Empty char. on input    : RECEIVED
**
**         Registers
**             Input buffer            : SPI2D     [0xFFFF81E5]
**             Output buffer           : SPI2D     [0xFFFF81E5]
**             Control register        : SPI2C1    [0xFFFF81E0]
**             Mode register           : SPI2C2    [0xFFFF81E1]
**             Baud setting reg.       : SPI2BR    [0xFFFF81E2]
**
**             Priority                : 520
**
**             Priority                : 520
**
**         Used pins                   :
**         ----------------------------------------------------------
**              Function    | On package |    Name
**         ----------------------------------------------------------
**               Input      |     67     |  PTE0_KBI2P0_MISO2_ADP2
**               Output     |     68     |  PTE1_KBI2P1_MOSI2_ADP1
**               Clock      |     66     |  PTD7_RGPIO7_SPSCK2_ADP3
**         ----------------------------------------------------------
**
**     Contents  :
**         Enable                - byte RxTx_spi_Enable(void);
**         Disable               - byte RxTx_spi_Disable(void);
**         EnableEvent           - byte RxTx_spi_EnableEvent(void);
**         DisableEvent          - byte RxTx_spi_DisableEvent(void);
**         RecvChar              - byte RxTx_spi_RecvChar(RxTx_spi_TComData *Chr);
**         SendChar              - byte RxTx_spi_SendChar(RxTx_spi_TComData Chr);
**         SetShiftClockPolarity - byte RxTx_spi_SetShiftClockPolarity(byte Edge);
**         SetIdleClockPolarity  - byte RxTx_spi_SetIdleClockPolarity(byte Level);
**         GetError              - byte RxTx_spi_GetError(RxTx_spi_TError *Err);
**
**     Copyright : 1997 - 2010 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __RxTx_spi
#define __RxTx_spi

/* MODULE RxTx_spi. */

#include "Cpu.h"



#define RxTx_spi_EOF 0x00              /* Empty character */

#ifndef __BWUserType_RxTx_spi_TComData
#define __BWUserType_RxTx_spi_TComData
  typedef byte RxTx_spi_TComData;      /* User type for communication. */
#endif

#ifndef __BWUserType_RxTx_spi_TError
#define __BWUserType_RxTx_spi_TError
  typedef union {
    byte err;
    struct {
      bool OverRun  : 1;   /* OverRun error flag - the data overflow on the input has been detected. Both hardware detection (if supported) and software detection (when the value of Input buffer size property is 0) is used. */
      bool RxBufOvf : 1;   /* Rx buffer full error flag - the input circular buffer defined by the Input buffer size property has overrun. */
      bool FaultErr : 1;   /* Fault mode error flag - only if supported by hardware */
    }errName;
  } RxTx_spi_TError;                   /* Error flags. For languages which don't support bit access is byte access only to error flags possible.  */
#endif



extern volatile bool RxTx_spi_EnEvent; /* Enable/Disable events */


byte RxTx_spi_Enable(void);
/*
** ===================================================================
**     Method      :  RxTx_spi_Enable (component SynchroMaster)
**
**     Description :
**         Enable the component - it starts send and receive functions.
**         Events may be generated ("DisableEvent"/"EnableEvent"). This
**         method cannot be disabled if the Fault mode is enabled. It's
**         intended for re-enabling the module if fault occurred. For
**         more information please see the <"Fault mode" >property .
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte RxTx_spi_Disable(void);
/*
** ===================================================================
**     Method      :  RxTx_spi_Disable (component SynchroMaster)
**
**     Description :
**         Disable the component - it stops the send and receive
**         functions. No events will be generated. Note: When this
**         method is called while a transmission is in progress, the
**         data being transmitted/received may be lost.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

#define RxTx_spi_EnableEvent()\
  (RxTx_spi_EnEvent = TRUE, (byte)ERR_OK) /* Set the flag "events enabled" */
/*
** ===================================================================
**     Method      :  RxTx_spi_EnableEvent (component SynchroMaster)
**
**     Description :
**         Enable the events. This method is available only if the
**         "Interrupt service/event" property is enabled and at least
**         the one of events is set to generate code.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

#define RxTx_spi_DisableEvent() (RxTx_spi_EnEvent = FALSE, (byte)ERR_OK) /* Set the flag "events disabled" */
/*
** ===================================================================
**     Method      :  RxTx_spi_DisableEvent (component SynchroMaster)
**
**     Description :
**         Disable the events. This method is available only if the
**         "Interrupt service/event" property is enabled and at least
**         the one of events is set to generate code.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte RxTx_spi_RecvChar(RxTx_spi_TComData *Chr);
/*
** ===================================================================
**     Method      :  RxTx_spi_RecvChar (component SynchroMaster)
**
**     Description :
**         If any data is received, this method returns one character,
**         otherwise it returns an error code (it does not wait for
**         data). 
**         For information about SW overrun behavior please see
**         <General info page>.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - A pointer to the received character
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK - The valid data is received.
**                           ERR_SPEED - This device does not work in
**                           the active speed mode.
**                           ERR_RXEMPTY - No data in receiver.
**                           ERR_OVERRUN - Overrun error was detected
**                           from the last char or block received. In
**                           polling mode, this error code is returned
**                           only when the hardware supports detection
**                           of the overrun error. The valid data is
**                           also received.
**                           ERR_FAULT - Fault error was detected from
**                           the last char or block received. In the
**                           polling mode the ERR_FAULT is return until
**                           the user clear the fault flag bit, but in
**                           the interrupt mode ERR_FAULT is returned
**                           only once after the fault error occured.
**                           This error is supported only on the CPUs
**                           supports the faul mode function - where
**                           <Fault mode> property is available.
** ===================================================================
*/

byte RxTx_spi_SendChar(RxTx_spi_TComData Chr);
/*
** ===================================================================
**     Method      :  RxTx_spi_SendChar (component SynchroMaster)
**
**     Description :
**         Sends one character to the channel.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Chr             - Character to send
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled (only if
**                           output DMA is supported and enabled)
**                           ERR_TXFULL - Transmitter is full
** ===================================================================
*/

byte RxTx_spi_SetShiftClockPolarity(byte Edge);
/*
** ===================================================================
**     Method      :  RxTx_spi_SetShiftClockPolarity (component SynchroMaster)
**
**     Description :
**         Sets the shift clock polarity at runtime. Output data will
**         be shifted on the selected edge polarity. The method will
**         disable communication (if enabled), change the shift clock
**         polarity end re-enable the communication (if it was enabled
**         before).
**     Parameters  :
**         NAME            - DESCRIPTION
**         Edge            - Edge polarity.
**                           0-falling edge
**                           1-rising edge
**     Returns     :
**         ---             - Error code, possible codes: ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_RANGE - Parameter out of range
** ===================================================================
*/

byte RxTx_spi_SetIdleClockPolarity(byte Level);
/*
** ===================================================================
**     Method      :  RxTx_spi_SetIdleClockPolarity (component SynchroMaster)
**
**     Description :
**         Sets the idle clock polarity at runtime. If the
**         communication does not run, the clock signal will have
**         required level. The method will disable communication (if
**         enabled), change the idle clock polarity end re-enable the
**         communication (if it was enabled before).
**     Parameters  :
**         NAME            - DESCRIPTION
**         Level           - Idle clock polarity:
**                           0-low
**                           1-high
**     Returns     :
**         ---             - Error code, possible codes: ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_RANGE - Parameter out of range
** ===================================================================
*/

byte RxTx_spi_GetError(RxTx_spi_TError *Err);
/*
** ===================================================================
**     Method      :  RxTx_spi_GetError (component SynchroMaster)
**
**     Description :
**         Returns a set of errors on the channel (errors that cannot
**         be returned in given methods). The component accumulates
**         errors in a set; after calling [GetError] this set is
**         returned and cleared. This method is available only if the
**         "Interrupt service/event" property is enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Err             - A pointer to the returned set of errors
**     Returns     :
**         ---             - Error code (if GetError did not succeed),
**                           possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

__interrupt void RxTx_spi_Interrupt(void);
/*
** ===================================================================
**     Method      :  RxTx_spi_Interrupt (component SynchroMaster)
**
**     Description :
**         The method services the error interrupt of the selected 
**         peripheral(s) and eventually invokes the component's event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void RxTx_spi_Init(void);
/*
** ===================================================================
**     Method      :  RxTx_spi_Init (component SynchroMaster)
**
**     Description :
**         Initializes the associated peripheral(s) and the component 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/


/* END RxTx_spi. */

#endif /* ifndef __RxTx_spi */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.09 [04.41]
**     for the Freescale ColdFireV1 series of microcontrollers.
**
** ###################################################################
*/
