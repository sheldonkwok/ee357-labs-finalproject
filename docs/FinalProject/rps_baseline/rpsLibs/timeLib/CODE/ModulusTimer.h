/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : ModulusTimer.h
**     Project   : timeLib
**     Processor : MCF51CN128CLK
**     Component : TimerInt
**     Version   : Component 02.158, Driver 01.20, CPU db: 3.00.030
**     Compiler  : CodeWarrior ColdFireV1 C Compiler
**     Date/Time : 9/1/2010, 7:04 PM
**     Abstract  :
**         This component "TimerInt" implements a periodic interrupt.
**         When the component and its events are enabled, the "OnInterrupt"
**         event is called periodically with the period that you specify.
**         TimerInt supports also changing the period in runtime.
**         The source of periodic interrupt can be timer compare or reload
**         register or timer-overflow interrupt (of free running counter).
**     Settings  :
**         Timer name                  : TPM1 (16-bit)
**         Compare name                : TPM12
**         Counter shared              : Yes
**
**         High speed mode
**             Prescaler               : divide-by-4
**             Clock                   : 6000000 Hz
**           Initial period/frequency
**             Xtal ticks              : 4
**             microseconds            : 125
**             seconds (real)          : 0.000125
**             Hz                      : 8000
**             kHz                     : 8
**
**         Runtime setting             : period/frequency interval (continual setting)
**             ticks                   : 1 to 3 ticks
**             microseconds            : 23 to 125 microseconds
**             seconds (real)          : 0.000022166667 to 0.000125 seconds
**             Hz                      : 8000 to 45112 Hz
**             kHz                     : 8 to 45 kHz
**
**         Initialization:
**              Timer                  : Disabled
**              Events                 : Disabled
**
**         Timer registers
**              Counter                : TPM1CNT   [0xFFFF8261]
**              Mode                   : TPM1SC    [0xFFFF8260]
**              Run                    : TPM1SC    [0xFFFF8260]
**              Prescaler              : TPM1SC    [0xFFFF8260]
**
**         Compare registers
**              Compare                : TPM1C2V   [0xFFFF826C]
**
**         Flip-flop registers
**              Mode                   : TPM1C2SC  [0xFFFF826B]
**     Contents  :
**         Enable       - byte ModulusTimer_Enable(void);
**         Disable      - byte ModulusTimer_Disable(void);
**         EnableEvent  - byte ModulusTimer_EnableEvent(void);
**         DisableEvent - byte ModulusTimer_DisableEvent(void);
**         SetFreqHz    - byte ModulusTimer_SetFreqHz(word Freq);
**
**     Copyright : 1997 - 2010 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __ModulusTimer
#define __ModulusTimer

/* MODULE ModulusTimer. */

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
#include "PE_Timer.h"
#include "Cpu.h"

/* PUBLISHED CONSTANTS */
#define ModulusTimer_SFREQ_HZ_MIN 0x1F40U /* Lower bound of interval for method SetFreqHz */
#define ModulusTimer_SFHzMin ModulusTimer_SFREQ_HZ_MIN /* Deprecated */
#define ModulusTimer_SFREQ_HZ_MAX 0xB038U /* Upper bound of interval for method SetFreqHz */
#define ModulusTimer_SFHzMax ModulusTimer_SFREQ_HZ_MAX /* Deprecated */
extern bool ModulusTimer_EnEvent;      /* Enable/Disable events */


byte ModulusTimer_Enable(void);
/*
** ===================================================================
**     Method      :  ModulusTimer_Enable (component TimerInt)
**
**     Description :
**         This method enables the component - it starts the timer.
**         Events may be generated (<DisableEvent>/<EnableEvent>).
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte ModulusTimer_Disable(void);
/*
** ===================================================================
**     Method      :  ModulusTimer_Disable (component TimerInt)
**
**     Description :
**         This method disables the component - it stops the timer. No
**         events will be generated.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

#define ModulusTimer_EnableEvent() (ModulusTimer_EnEvent = TRUE, (byte)ERR_OK) /* Set the flag "events enabled" */
/*
** ===================================================================
**     Method      :  ModulusTimer_EnableEvent (component TimerInt)
**
**     Description :
**         This method enables the events.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

#define ModulusTimer_DisableEvent() (ModulusTimer_EnEvent = FALSE, (byte)ERR_OK) /* Set the flag "events disabled" */
/*
** ===================================================================
**     Method      :  ModulusTimer_DisableEvent (component TimerInt)
**
**     Description :
**         This method disables the events.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte ModulusTimer_SetFreqHz(word Freq);
/*
** ===================================================================
**     Method      :  ModulusTimer_SetFreqHz (component TimerInt)
**
**     Description :
**         This method sets the new frequency of the generated
**         events. The frequency is expressed in Hz as a 16-bit
**         unsigned integer number.
**         This method is available only if the runtime setting type
**         'from interval' is selected in the Timing dialog box in
**         the Runtime setting area.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Freq            - Frequency to set [in Hz]
**                      (8000 to 45112 Hz)
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_MATH - Overflow during evaluation
**                           ERR_RANGE - Parameter out of range
** ===================================================================
*/

__interrupt void ModulusTimer_Interrupt(void);
/*
** ===================================================================
**     Method      :  ModulusTimer_Interrupt (component TimerInt)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes the component event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void ModulusTimer_Init(void);
/*
** ===================================================================
**     Method      :  ModulusTimer_Init (component TimerInt)
**
**     Description :
**         Initializes the associated peripheral(s) and the component 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/


/* END ModulusTimer. */

#endif /* ifndef __ModulusTimer */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.09 [04.41]
**     for the Freescale ColdFireV1 series of microcontrollers.
**
** ###################################################################
*/
